---
#- name: Describe the snapshots and get the snapshot start time
  #command: aws ec2 describe-snapshots --region "{{ region }}" --query Snapshots[?(StartTime>="'$(date --date="'-1 month'" "'+%Y-%m-%d'")'")].[SnapshotId]
  #--filters Name=tag:snapshot,Values=yes --output text
  #register: command_output

#- debug: 
 #   msg: "{{command_output.stdout_lines}}"
######################################################################################################################################################################################################################################################################################
# FINDING UNTAGGED SNAPSHOTS 
###################################################################################################################################################################################################################################################################################### 
- name: Ensure required tags are present on snapshots
  command: aws ec2 describe-snapshots --region "{{ region }}" --owner-ids self --query "Snapshots[?!not_null(Tags[?Key == 'Expiry'].Value) && !not_null(Tags[?Key == 'Email'].Value)].{"'SnapShotID:'"SnapshotId, "'OwnerID:'"OwnerId, "'Tags:'"Tags, "'StartTime:'"StartTime}" --output json
  register: ensured_snapshot_details
- debug: msg="{{ensured_snapshot_details.stdout_lines}}"

- debug:
    msg: "{{ item }}"
  with_items: "{{ ensured_snapshot_details.stdout_lines | list }}"

#- name: Create a file to store the Untagged Snapshot Report
  #local_action: copy content={{ ensured_snapshot_details.stdout_lines}} dest=template/UntaggedSnapshotReport"{{ '%Y-%m-%d %H:%M:%S' | strftime(ansible_date_time.epoch) }}".json
 # copy:
  #    dest: "/home/centos/UntaggedSnapshotReport{{ '%Y-%m-%d %H:%M:%S' | strftime(ansible_date_time.epoch) }}.csv"
   #   content: "{{ item }}"
  #with_items: "{{ ensured_snapshot_details.stdout_lines }}"
  #register: result

##   var: "{{ result['results'][0]['dest'] }}"
 

#- set_fact: 
 #   dataresult: "{{result.stdout | from_json}}"

#- debug: 
 #   msg: "{{ dataresult.[0].dest }}" 

  

#- debug: 
  #timestamp: "{{ ansible_date_time.iso8601_micro }}"
######################################################################################################################################################################################################################################################################################
# VERIFYING THE SOURCE AND DESTINITION EMAIL IDs IN AWS SES
######################################################################################################################################################################################################################################################################################

#- name: Ensure the SES Recipient Identity
 # aws_ses_identity:
  #  region: "{{ region }}"
   # identity: "{{ reciever_identity }}"
    #state: present
  #register: reciever

#- debug: msg="{{reciever}}"

#- name: Ensure the SES Sender Identity
 # aws_ses_identity:
  #  region: "{{ region }}"
   # identity: "{{ sender_identity }}"
    #state: present
  #register: sender

#- debug: msg="{{sender}}"

######################################################################################################################################################################################################################################################################################
# SENDING THE EMAIL
######################################################################################################################################################################################################################################################################################

#- name: Send the based on th conditions check
 # when: sender and reciever
  #script: files/ses.py {{ sender_identity }} {{ reciever_identity }} {{ region }}



